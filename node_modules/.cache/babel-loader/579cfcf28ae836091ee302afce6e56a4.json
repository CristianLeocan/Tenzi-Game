{"ast":null,"code":"var _jsxFileName = \"G:\\\\03 Projects React\\\\app-tenzi\\\\tenzi\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport './index.css';\nimport Header from './components/Header/Header';\nimport Boxes from './components/Boxes/Boxes.js';\nimport { nanoid } from 'nanoid';\nimport Timer from './components/Timer/Timer';\nimport Confetti from 'react-confetti';\nimport SetDifficultyGame from './components/Difficulty/Difficulty';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  /*const [box, setBox] = useState(generateInitialBoxes())\n  const [won, setWon] = useState(false)\n  let difficulty = 1;\n   useEffect(() => {\n     const allBox = box.every(item =>item.isPressed)\n     const firstValue = box[0].value\n     const allValue = box.every(item => item.value === firstValue)\n     if (allBox && allValue) {\n        setWon(true)\n     }\n  }, [box])\n   function generateNewBox() {\n    return {\n      value: Math.floor(Math.random() * 6) + 1,\n      isPressed: false,\n      id: nanoid(),\n    }\n  }\n   function generateInitialBoxes() {\n    const boxes= [];    \n    for (let i = 0; i < 10; ++i) {\n      boxes.push(generateNewBox())\n    }   \n  return boxes    \n  }\n   function structureOfBox(id) {\n    if (intervalId) {\n      setBox(prevBox => prevBox.map(box => {\n        return box.id === id ? {...box, isPressed: !box.isPressed} : box\n      }))\n    }\n  }\n   const boxElements = box.map(valueGenerated => (    \n    <Boxes key={valueGenerated.id} value = {valueGenerated.value} isPressed={valueGenerated.isPressed} id={valueGenerated.id} structureOfBox={() => structureOfBox(valueGenerated.id)}/>\n  ))\n   function setGame() {\n    if(!won) {\n      if(intervalId) {\n        setBox(prevBox => prevBox.map(box => {\n          return box.isPressed ? \n          box :\n          generateNewBox()\n        }))\n      }\n    } else {\n      setWon(false)\n      setBox(generateInitialBoxes())\n      setSeconds(0);\n      setMinutes(0);\n      count = 0;\n    }\n  }\n  */\n  //-----------------Timer----------------------\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [intervalId, setIntervalId] = useState(0);\n  let count = 0;\n\n  const startStop = () => {\n    if (intervalId) {\n      count = seconds;\n      clearInterval(intervalId);\n      setIntervalId(0);\n      return;\n    }\n\n    const newIntervalId = setInterval(() => {\n      setSeconds(prevSeconds => prevSeconds + 1);\n      ++count;\n\n      if (count % 59 === 0) {\n        setSeconds(0);\n        setMinutes(prevMinutes => prevMinutes + 1);\n      }\n    }, 1000);\n    setIntervalId(newIntervalId);\n  }; //-----------------------------------------------\n\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: difficulty !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [won && startStop && /*#__PURE__*/_jsxDEV(Confetti, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Timer, {\n        seconds: seconds,\n        minutes: minutes,\n        intervalId: intervalId,\n        startStop: startStop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: boxElements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"roll\",\n        onClick: setGame,\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: won ? \"New Game\" : \"ROLL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(SetDifficultyGame, {\n      setDiffilculty: difficulty,\n      numberOfBox: generateInitialBoxes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Zk2viwuLisyS7THittGuKlLGuUo=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Header","Boxes","nanoid","Timer","Confetti","SetDifficultyGame","App","seconds","setSeconds","minutes","setMinutes","intervalId","setIntervalId","count","startStop","clearInterval","newIntervalId","setInterval","prevSeconds","prevMinutes","difficulty","won","boxElements","setGame","generateInitialBoxes"],"sources":["G:/03 Projects React/app-tenzi/tenzi/src/App.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport './index.css';\nimport Header from './components/Header/Header'\nimport Boxes from './components/Boxes/Boxes.js';\nimport {nanoid} from 'nanoid';\nimport Timer from './components/Timer/Timer';\nimport Confetti from 'react-confetti';\nimport SetDifficultyGame from './components/Difficulty/Difficulty';\n\nexport default function App() {\n  /*const [box, setBox] = useState(generateInitialBoxes())\n  const [won, setWon] = useState(false)\n  let difficulty = 1;\n\n  useEffect(() => {\n     const allBox = box.every(item =>item.isPressed)\n     const firstValue = box[0].value\n     const allValue = box.every(item => item.value === firstValue)\n     if (allBox && allValue) {\n        setWon(true)\n     }\n  }, [box])\n\n  function generateNewBox() {\n    return {\n      value: Math.floor(Math.random() * 6) + 1,\n      isPressed: false,\n      id: nanoid(),\n    }\n  }\n\n  function generateInitialBoxes() {\n    const boxes= [];    \n    for (let i = 0; i < 10; ++i) {\n      boxes.push(generateNewBox())\n    }   \n  return boxes    \n  }\n\n  function structureOfBox(id) {\n    if (intervalId) {\n      setBox(prevBox => prevBox.map(box => {\n        return box.id === id ? {...box, isPressed: !box.isPressed} : box\n      }))\n    }\n  }\n\n  const boxElements = box.map(valueGenerated => (    \n    <Boxes key={valueGenerated.id} value = {valueGenerated.value} isPressed={valueGenerated.isPressed} id={valueGenerated.id} structureOfBox={() => structureOfBox(valueGenerated.id)}/>\n  ))\n\n  function setGame() {\n    if(!won) {\n      if(intervalId) {\n        setBox(prevBox => prevBox.map(box => {\n          return box.isPressed ? \n          box :\n          generateNewBox()\n        }))\n      }\n    } else {\n      setWon(false)\n      setBox(generateInitialBoxes())\n      setSeconds(0);\n      setMinutes(0);\n      count = 0;\n    }\n  }\n*/\n//-----------------Timer----------------------\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [intervalId, setIntervalId] = useState(0);\n  let count = 0;  \n\n  const startStop = () => {\n    if (intervalId) {\n      count = seconds;\n      clearInterval(intervalId);\n      setIntervalId(0);\n      return;\n    }\n\n    const newIntervalId = setInterval(() => {\n      setSeconds(prevSeconds => prevSeconds + 1);\n        ++count; \n        if (count % 59 === 0) {\n          setSeconds(0);\n          setMinutes(prevMinutes => prevMinutes + 1);                    \n        }\n    }, 1000); \n    setIntervalId(newIntervalId);\n  };  \n//-----------------------------------------------\n  return (\n    <main>\n        {\n        difficulty !== 0\n        ?\n        <div>\n          {won && startStop && <Confetti/>} \n          <Header /> \n          <Timer \n            seconds={seconds}\n            minutes={minutes}\n            intervalId={intervalId}\n            startStop={startStop}        \n          />\n          <div className='container'> \n            {boxElements}\n          </div>\n          <button \n            className='roll' \n            onClick={setGame} \n            > \n              <strong>{won ? \"New Game\" : \"ROLL\"}</strong>\n          </button> \n        </div>\n        :        \n        <SetDifficultyGame  \n          setDiffilculty={difficulty}\n          numberOfBox={generateInitialBoxes}\n        />\n      }\n    </main>\n  )\n}"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAO,aAAP;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;;AAEA,eAAe,SAASC,GAAT,GAAe;EAAA;;EAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAOA;EACE,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CAAD,CAAtC;EACA,MAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,CAAD,CAAtC;EACA,MAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,CAAD,CAA5C;EACA,IAAIe,KAAK,GAAG,CAAZ;;EAEA,MAAMC,SAAS,GAAG,MAAM;IACtB,IAAIH,UAAJ,EAAgB;MACdE,KAAK,GAAGN,OAAR;MACAQ,aAAa,CAACJ,UAAD,CAAb;MACAC,aAAa,CAAC,CAAD,CAAb;MACA;IACD;;IAED,MAAMI,aAAa,GAAGC,WAAW,CAAC,MAAM;MACtCT,UAAU,CAACU,WAAW,IAAIA,WAAW,GAAG,CAA9B,CAAV;MACE,EAAEL,KAAF;;MACA,IAAIA,KAAK,GAAG,EAAR,KAAe,CAAnB,EAAsB;QACpBL,UAAU,CAAC,CAAD,CAAV;QACAE,UAAU,CAACS,WAAW,IAAIA,WAAW,GAAG,CAA9B,CAAV;MACD;IACJ,CAPgC,EAO9B,IAP8B,CAAjC;IAQAP,aAAa,CAACI,aAAD,CAAb;EACD,CAjBD,CAlE4B,CAoF9B;;;EACE,oBACE;IAAA,UAEII,UAAU,KAAK,CAAf,gBAEA;MAAA,WACGC,GAAG,IAAIP,SAAP,iBAAoB,QAAC,QAAD;QAAA;QAAA;QAAA;MAAA,QADvB,eAEE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE,QAAC,KAAD;QACE,OAAO,EAAEP,OADX;QAEE,OAAO,EAAEE,OAFX;QAGE,UAAU,EAAEE,UAHd;QAIE,SAAS,EAAEG;MAJb;QAAA;QAAA;QAAA;MAAA,QAHF,eASE;QAAK,SAAS,EAAC,WAAf;QAAA,UACGQ;MADH;QAAA;QAAA;QAAA;MAAA,QATF,eAYE;QACE,SAAS,EAAC,MADZ;QAEE,OAAO,EAAEC,OAFX;QAAA,uBAII;UAAA,UAASF,GAAG,GAAG,UAAH,GAAgB;QAA5B;UAAA;UAAA;UAAA;QAAA;MAJJ;QAAA;QAAA;QAAA;MAAA,QAZF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFA,gBAsBA,QAAC,iBAAD;MACE,cAAc,EAAED,UADlB;MAEE,WAAW,EAAEI;IAFf;MAAA;MAAA;MAAA;IAAA;EAxBJ;IAAA;IAAA;IAAA;EAAA,QADF;AAgCD;;GArHuBlB,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}