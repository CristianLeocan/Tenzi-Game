{"ast":null,"code":"var _jsxFileName = \"G:\\\\03 Projects React\\\\app-tenzi\\\\tenzi\\\\src\\\\components\\\\Timer\\\\Timer.js\",\n    _s = $RefreshSig$();\n\nimport './timer.css';\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Time = () => {\n  _s();\n\n  // We need ref in this, because we are dealing\n  // with JS setInterval to keep track of it and\n  // stop it when needed\n  const Ref = useRef(null); // The state for our timer\n\n  const [timer, setTimer] = useState('00:00');\n\n  const getTimeRemaining = time => {\n    const total = Date.parse(time) - Date.parse(new Date());\n    const seconds = Math.floor(total / 1000 % 60);\n    const minutes = Math.floor(total / 1000 / 60 % 60);\n    return {\n      total,\n      minutes,\n      seconds\n    };\n  };\n\n  const startTimer = time => {\n    let {\n      total,\n      minutes,\n      seconds\n    } = getTimeRemaining(time);\n\n    if (total >= 0) {\n      // update the timer\n      // check if less than 10 then we need to \n      // add '0' at the begining of the variable\n      setTimer((minutes > 9 ? minutes : '0' + minutes) + ':' + (seconds > 9 ? seconds : '0' + seconds));\n    }\n  };\n\n  const clearTimer = time => {\n    // If you adjust it you should also need to\n    // adjust the Endtime formula we are about\n    // to code next    \n    setTimer('00:00:10'); // If you try to remove this line the \n    // updating of timer Variable will be\n    // after 1000ms or 1sec\n\n    if (Ref.current) clearInterval(Ref.current);\n    const id = setInterval(() => {\n      startTimer(time);\n    }, 1000);\n    Ref.current = id;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Time, \"A+Y4HfAo4f1M2i8Ts36cU3ItqXI=\");\n\n_c = Time;\nexport default Time;\n\nvar _c;\n\n$RefreshReg$(_c, \"Time\");","map":{"version":3,"names":["useState","useEffect","useRef","Time","Ref","timer","setTimer","getTimeRemaining","time","total","Date","parse","seconds","Math","floor","minutes","startTimer","clearTimer","current","clearInterval","id","setInterval"],"sources":["G:/03 Projects React/app-tenzi/tenzi/src/components/Timer/Timer.js"],"sourcesContent":["import './timer.css';\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\nconst Time = () => {\r\n  \r\n    // We need ref in this, because we are dealing\r\n    // with JS setInterval to keep track of it and\r\n    // stop it when needed\r\n    const Ref = useRef(null);\r\n  \r\n    // The state for our timer\r\n    const [timer, setTimer] = useState('00:00');\r\n  \r\n  \r\n    const getTimeRemaining = (time) => {\r\n        const total = Date.parse(time) - Date.parse(new Date());\r\n        const seconds = Math.floor((total / 1000) % 60);\r\n        const minutes = Math.floor((total / 1000 / 60) % 60);\r\n        \r\n        return {\r\n            total, minutes, seconds\r\n        };\r\n    }\r\n  \r\n  \r\n    const startTimer = (time) => {\r\n        let { total, minutes, seconds } \r\n                    = getTimeRemaining(time);\r\n        if (total >= 0) {\r\n  \r\n            // update the timer\r\n            // check if less than 10 then we need to \r\n            // add '0' at the begining of the variable\r\n            setTimer(                \r\n                (minutes > 9 ? minutes : '0' + minutes) + ':'\r\n                + (seconds > 9 ? seconds : '0' + seconds)\r\n            )\r\n        }\r\n    }\r\n  \r\n  \r\n    const clearTimer = (time) => {\r\n  \r\n        // If you adjust it you should also need to\r\n        // adjust the Endtime formula we are about\r\n        // to code next    \r\n        setTimer('00:00:10');\r\n  \r\n        // If you try to remove this line the \r\n        // updating of timer Variable will be\r\n        // after 1000ms or 1sec\r\n        if (Ref.current) clearInterval(Ref.current);\r\n        const id = setInterval(() => {\r\n            startTimer(time);\r\n        }, 1000)\r\n        Ref.current = id;\r\n    } \r\n    return (\r\n        <div>\r\n            <h2>{timer}</h2>           \r\n        </div>\r\n    )\r\n}\r\n  \r\nexport default Time;"],"mappings":";;;AAAA,OAAO,aAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;;AAEA,MAAMC,IAAI,GAAG,MAAM;EAAA;;EAEf;EACA;EACA;EACA,MAAMC,GAAG,GAAGF,MAAM,CAAC,IAAD,CAAlB,CALe,CAOf;;EACA,MAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,OAAD,CAAlC;;EAGA,MAAMO,gBAAgB,GAAIC,IAAD,IAAU;IAC/B,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,IAAmBE,IAAI,CAACC,KAAL,CAAW,IAAID,IAAJ,EAAX,CAAjC;IACA,MAAME,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYL,KAAK,GAAG,IAAT,GAAiB,EAA5B,CAAhB;IACA,MAAMM,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAYL,KAAK,GAAG,IAAR,GAAe,EAAhB,GAAsB,EAAjC,CAAhB;IAEA,OAAO;MACHA,KADG;MACIM,OADJ;MACaH;IADb,CAAP;EAGH,CARD;;EAWA,MAAMI,UAAU,GAAIR,IAAD,IAAU;IACzB,IAAI;MAAEC,KAAF;MAASM,OAAT;MAAkBH;IAAlB,IACUL,gBAAgB,CAACC,IAAD,CAD9B;;IAEA,IAAIC,KAAK,IAAI,CAAb,EAAgB;MAEZ;MACA;MACA;MACAH,QAAQ,CACJ,CAACS,OAAO,GAAG,CAAV,GAAcA,OAAd,GAAwB,MAAMA,OAA/B,IAA0C,GAA1C,IACGH,OAAO,GAAG,CAAV,GAAcA,OAAd,GAAwB,MAAMA,OADjC,CADI,CAAR;IAIH;EACJ,CAbD;;EAgBA,MAAMK,UAAU,GAAIT,IAAD,IAAU;IAEzB;IACA;IACA;IACAF,QAAQ,CAAC,UAAD,CAAR,CALyB,CAOzB;IACA;IACA;;IACA,IAAIF,GAAG,CAACc,OAAR,EAAiBC,aAAa,CAACf,GAAG,CAACc,OAAL,CAAb;IACjB,MAAME,EAAE,GAAGC,WAAW,CAAC,MAAM;MACzBL,UAAU,CAACR,IAAD,CAAV;IACH,CAFqB,EAEnB,IAFmB,CAAtB;IAGAJ,GAAG,CAACc,OAAJ,GAAcE,EAAd;EACH,CAfD;;EAgBA,oBACI;IAAA,uBACI;MAAA,UAAKf;IAAL;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CA3DD;;GAAMF,I;;KAAAA,I;AA6DN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}